/*
* generated by Xtext
*/

package com.br.refactoring.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cContainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainsTypeParserRuleCall_3_0 = (RuleCall)cContainsAssignment_3.eContents().get(0);
		
		//Model:
		//	"model" name=ID imports+=Import* contains+=Type*;
		public ParserRule getRule() { return rule; }

		//"model" name=ID imports+=Import* contains+=Type*
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//contains+=Type*
		public Assignment getContainsAssignment_3() { return cContainsAssignment_3; }

		//Type
		public RuleCall getContainsTypeParserRuleCall_3_0() { return cContainsTypeParserRuleCall_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"importing" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"importing" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"importing"
		public Keyword getImportingKeyword_0() { return cImportingKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefactoringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Class | Refactoring;
		public ParserRule getRule() { return rule; }

		//Class | Refactoring
		public Alternatives getAlternatives() { return cAlternatives; }

		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }

		//Refactoring
		public RuleCall getRefactoringParserRuleCall_1() { return cRefactoringParserRuleCall_1; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cMethodsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMethodsMethodParserRuleCall_4_0 = (RuleCall)cMethodsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class:
		//	"Class" name=ID "{" attributes+=Attribute* methods+=Method* "}";
		public ParserRule getRule() { return rule; }

		//"Class" name=ID "{" attributes+=Attribute* methods+=Method* "}"
		public Group getGroup() { return cGroup; }

		//"Class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_4() { return cMethodsAssignment_4; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_4_0() { return cMethodsMethodParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_0 = (RuleCall)cElementTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Attribute:
		//	"@" elementType=ElementType name=ID;
		public ParserRule getRule() { return rule; }

		//"@" elementType=ElementType name=ID
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_1() { return cElementTypeAssignment_1; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_0() { return cElementTypeElementTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementType:
		//	BasicType | ClassType;
		public ParserRule getRule() { return rule; }

		//BasicType | ClassType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//ClassType
		public RuleCall getClassTypeParserRuleCall_1() { return cClassTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameStringKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameIntKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameBooleanKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameFloatKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameCharKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		private final Keyword cTypeNameByteKeyword_0_5 = (Keyword)cTypeNameAlternatives_0.eContents().get(5);
		private final Keyword cTypeNameShortKeyword_0_6 = (Keyword)cTypeNameAlternatives_0.eContents().get(6);
		private final Keyword cTypeNameLongKeyword_0_7 = (Keyword)cTypeNameAlternatives_0.eContents().get(7);
		private final Keyword cTypeNameDoubleKeyword_0_8 = (Keyword)cTypeNameAlternatives_0.eContents().get(8);
		
		//BasicType:
		//	typeName=("string" | "int" | "boolean" | "float" | "char" | "byte" | "short" | "long" | "double");
		public ParserRule getRule() { return rule; }

		//typeName=("string" | "int" | "boolean" | "float" | "char" | "byte" | "short" | "long" | "double")
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }

		//"string" | "int" | "boolean" | "float" | "char" | "byte" | "short" | "long" | "double"
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }

		//"string"
		public Keyword getTypeNameStringKeyword_0_0() { return cTypeNameStringKeyword_0_0; }

		//"int"
		public Keyword getTypeNameIntKeyword_0_1() { return cTypeNameIntKeyword_0_1; }

		//"boolean"
		public Keyword getTypeNameBooleanKeyword_0_2() { return cTypeNameBooleanKeyword_0_2; }

		//"float"
		public Keyword getTypeNameFloatKeyword_0_3() { return cTypeNameFloatKeyword_0_3; }

		//"char"
		public Keyword getTypeNameCharKeyword_0_4() { return cTypeNameCharKeyword_0_4; }

		//"byte"
		public Keyword getTypeNameByteKeyword_0_5() { return cTypeNameByteKeyword_0_5; }

		//"short"
		public Keyword getTypeNameShortKeyword_0_6() { return cTypeNameShortKeyword_0_6; }

		//"long"
		public Keyword getTypeNameLongKeyword_0_7() { return cTypeNameLongKeyword_0_7; }

		//"double"
		public Keyword getTypeNameDoubleKeyword_0_8() { return cTypeNameDoubleKeyword_0_8; }
	}

	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassType");
		private final Assignment cClassTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cClassTypeClassCrossReference_0 = (CrossReference)cClassTypeAssignment.eContents().get(0);
		private final RuleCall cClassTypeClassIDTerminalRuleCall_0_1 = (RuleCall)cClassTypeClassCrossReference_0.eContents().get(1);
		
		//ClassType:
		//	classType=[Class];
		public ParserRule getRule() { return rule; }

		//classType=[Class]
		public Assignment getClassTypeAssignment() { return cClassTypeAssignment; }

		//[Class]
		public CrossReference getClassTypeClassCrossReference_0() { return cClassTypeClassCrossReference_0; }

		//ID
		public RuleCall getClassTypeClassIDTerminalRuleCall_0_1() { return cClassTypeClassIDTerminalRuleCall_0_1; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Method:
		//	"def" name=ID;
		public ParserRule getRule() { return rule; }

		//"def" name=ID
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RefactoringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Refactoring");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRenameFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMovingFeaturesBetweenObjectsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrganizingDataParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDealingWithGeneralizationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Refactoring:
		//	RenameFeature | MovingFeaturesBetweenObjects | OrganizingData | DealingWithGeneralization;
		public ParserRule getRule() { return rule; }

		//RenameFeature | MovingFeaturesBetweenObjects | OrganizingData | DealingWithGeneralization
		public Alternatives getAlternatives() { return cAlternatives; }

		//RenameFeature
		public RuleCall getRenameFeatureParserRuleCall_0() { return cRenameFeatureParserRuleCall_0; }

		//MovingFeaturesBetweenObjects
		public RuleCall getMovingFeaturesBetweenObjectsParserRuleCall_1() { return cMovingFeaturesBetweenObjectsParserRuleCall_1; }

		//OrganizingData
		public RuleCall getOrganizingDataParserRuleCall_2() { return cOrganizingDataParserRuleCall_2; }

		//DealingWithGeneralization
		public RuleCall getDealingWithGeneralizationParserRuleCall_3() { return cDealingWithGeneralizationParserRuleCall_3; }
	}

	public class RenameFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenameFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRename_FeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllRefactoringsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllRefactoringsRenameClassParserRuleCall_3_0 = (RuleCall)cAllRefactoringsAssignment_3.eContents().get(0);
		private final Assignment cAllRefactoringsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAllRefactoringsRenameAttributeParserRuleCall_4_0 = (RuleCall)cAllRefactoringsAssignment_4.eContents().get(0);
		private final Assignment cAllRefactoringsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAllRefactoringsRenameMethodParserRuleCall_5_0 = (RuleCall)cAllRefactoringsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RenameFeature:
		//	"Rename_Feature" name=ID "{" allRefactorings+=RenameClass* allRefactorings+=RenameAttribute*
		//	allRefactorings+=RenameMethod* "}";
		public ParserRule getRule() { return rule; }

		//"Rename_Feature" name=ID "{" allRefactorings+=RenameClass* allRefactorings+=RenameAttribute*
		//allRefactorings+=RenameMethod* "}"
		public Group getGroup() { return cGroup; }

		//"Rename_Feature"
		public Keyword getRename_FeatureKeyword_0() { return cRename_FeatureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//allRefactorings+=RenameClass*
		public Assignment getAllRefactoringsAssignment_3() { return cAllRefactoringsAssignment_3; }

		//RenameClass
		public RuleCall getAllRefactoringsRenameClassParserRuleCall_3_0() { return cAllRefactoringsRenameClassParserRuleCall_3_0; }

		//allRefactorings+=RenameAttribute*
		public Assignment getAllRefactoringsAssignment_4() { return cAllRefactoringsAssignment_4; }

		//RenameAttribute
		public RuleCall getAllRefactoringsRenameAttributeParserRuleCall_4_0() { return cAllRefactoringsRenameAttributeParserRuleCall_4_0; }

		//allRefactorings+=RenameMethod*
		public Assignment getAllRefactoringsAssignment_5() { return cAllRefactoringsAssignment_5; }

		//RenameMethod
		public RuleCall getAllRefactoringsRenameMethodParserRuleCall_5_0() { return cAllRefactoringsRenameMethodParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RenameClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenameClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_RenameClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cClassToBeRenameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClassToBeRenameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cClassToBeRenameClassCrossReference_5_0 = (CrossReference)cClassToBeRenameAssignment_5.eContents().get(0);
		private final RuleCall cClassToBeRenameClassIDTerminalRuleCall_5_0_1 = (RuleCall)cClassToBeRenameClassCrossReference_5_0.eContents().get(1);
		private final Keyword cNewNameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNewNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNewNameIDTerminalRuleCall_8_0 = (RuleCall)cNewNameAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//RenameClass:
		//	"Refactoring_RenameClass" name=ID "{" "classToBeRename" ":" classToBeRename=[Class] "newName" ":" newName=ID "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_RenameClass" name=ID "{" "classToBeRename" ":" classToBeRename=[Class] "newName" ":" newName=ID "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_RenameClass"
		public Keyword getRefactoring_RenameClassKeyword_0() { return cRefactoring_RenameClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"classToBeRename"
		public Keyword getClassToBeRenameKeyword_3() { return cClassToBeRenameKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//classToBeRename=[Class]
		public Assignment getClassToBeRenameAssignment_5() { return cClassToBeRenameAssignment_5; }

		//[Class]
		public CrossReference getClassToBeRenameClassCrossReference_5_0() { return cClassToBeRenameClassCrossReference_5_0; }

		//ID
		public RuleCall getClassToBeRenameClassIDTerminalRuleCall_5_0_1() { return cClassToBeRenameClassIDTerminalRuleCall_5_0_1; }

		//"newName"
		public Keyword getNewNameKeyword_6() { return cNewNameKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//newName=ID
		public Assignment getNewNameAssignment_8() { return cNewNameAssignment_8; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_8_0() { return cNewNameIDTerminalRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class RenameAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenameAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactiong_RenameAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cAttributeToBeRenameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAttributeToBeRenameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cAttributeToBeRenameAttributeCrossReference_8_0 = (CrossReference)cAttributeToBeRenameAssignment_8.eContents().get(0);
		private final RuleCall cAttributeToBeRenameAttributeIDTerminalRuleCall_8_0_1 = (RuleCall)cAttributeToBeRenameAttributeCrossReference_8_0.eContents().get(1);
		private final Keyword cNewNameKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNewNameAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNewNameIDTerminalRuleCall_11_0 = (RuleCall)cNewNameAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//RenameAttribute:
		//	"Refactiong_RenameAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToBeRename" ":"
		//	attributeToBeRename=[Attribute] "newName" ":" newName=ID "}";
		public ParserRule getRule() { return rule; }

		//"Refactiong_RenameAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToBeRename" ":"
		//attributeToBeRename=[Attribute] "newName" ":" newName=ID "}"
		public Group getGroup() { return cGroup; }

		//"Refactiong_RenameAttribute"
		public Keyword getRefactiong_RenameAttributeKeyword_0() { return cRefactiong_RenameAttributeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"attributeToBeRename"
		public Keyword getAttributeToBeRenameKeyword_6() { return cAttributeToBeRenameKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//attributeToBeRename=[Attribute]
		public Assignment getAttributeToBeRenameAssignment_8() { return cAttributeToBeRenameAssignment_8; }

		//[Attribute]
		public CrossReference getAttributeToBeRenameAttributeCrossReference_8_0() { return cAttributeToBeRenameAttributeCrossReference_8_0; }

		//ID
		public RuleCall getAttributeToBeRenameAttributeIDTerminalRuleCall_8_0_1() { return cAttributeToBeRenameAttributeIDTerminalRuleCall_8_0_1; }

		//"newName"
		public Keyword getNewNameKeyword_9() { return cNewNameKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//newName=ID
		public Assignment getNewNameAssignment_11() { return cNewNameAssignment_11; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_11_0() { return cNewNameIDTerminalRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class RenameMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenameMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_RenameMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cMethodToBeRenameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMethodToBeRenameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cMethodToBeRenameMethodCrossReference_8_0 = (CrossReference)cMethodToBeRenameAssignment_8.eContents().get(0);
		private final RuleCall cMethodToBeRenameMethodIDTerminalRuleCall_8_0_1 = (RuleCall)cMethodToBeRenameMethodCrossReference_8_0.eContents().get(1);
		private final Keyword cNewNameKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cNewNameAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNewNameIDTerminalRuleCall_11_0 = (RuleCall)cNewNameAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//RenameMethod:
		//	"Refactoring_RenameMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "methodToBeRename" ":"
		//	methodToBeRename=[Method] "newName" ":" newName=ID "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_RenameMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "methodToBeRename" ":"
		//methodToBeRename=[Method] "newName" ":" newName=ID "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_RenameMethod"
		public Keyword getRefactoring_RenameMethodKeyword_0() { return cRefactoring_RenameMethodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"methodToBeRename"
		public Keyword getMethodToBeRenameKeyword_6() { return cMethodToBeRenameKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//methodToBeRename=[Method]
		public Assignment getMethodToBeRenameAssignment_8() { return cMethodToBeRenameAssignment_8; }

		//[Method]
		public CrossReference getMethodToBeRenameMethodCrossReference_8_0() { return cMethodToBeRenameMethodCrossReference_8_0; }

		//ID
		public RuleCall getMethodToBeRenameMethodIDTerminalRuleCall_8_0_1() { return cMethodToBeRenameMethodIDTerminalRuleCall_8_0_1; }

		//"newName"
		public Keyword getNewNameKeyword_9() { return cNewNameKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//newName=ID
		public Assignment getNewNameAssignment_11() { return cNewNameAssignment_11; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_11_0() { return cNewNameIDTerminalRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class MovingFeaturesBetweenObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MovingFeaturesBetweenObjects");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMovingFeaturesBetweenObjectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllRefactoringsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllRefactoringsMoveAttributeParserRuleCall_3_0 = (RuleCall)cAllRefactoringsAssignment_3.eContents().get(0);
		private final Assignment cAllRefactoringsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAllRefactoringsMoveMethodParserRuleCall_4_0 = (RuleCall)cAllRefactoringsAssignment_4.eContents().get(0);
		private final Assignment cAllRefactoringsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAllRefactoringsExtractClassParserRuleCall_5_0 = (RuleCall)cAllRefactoringsAssignment_5.eContents().get(0);
		private final Assignment cAllRefactoringsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAllRefactoringsInlineClassParserRuleCall_6_0 = (RuleCall)cAllRefactoringsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MovingFeaturesBetweenObjects:
		//	"MovingFeaturesBetweenObjects" name=ID "{" allRefactorings+=MoveAttribute* allRefactorings+=MoveMethod*
		//	allRefactorings+=ExtractClass* allRefactorings+=InlineClass* "}";
		public ParserRule getRule() { return rule; }

		//"MovingFeaturesBetweenObjects" name=ID "{" allRefactorings+=MoveAttribute* allRefactorings+=MoveMethod*
		//allRefactorings+=ExtractClass* allRefactorings+=InlineClass* "}"
		public Group getGroup() { return cGroup; }

		//"MovingFeaturesBetweenObjects"
		public Keyword getMovingFeaturesBetweenObjectsKeyword_0() { return cMovingFeaturesBetweenObjectsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//allRefactorings+=MoveAttribute*
		public Assignment getAllRefactoringsAssignment_3() { return cAllRefactoringsAssignment_3; }

		//MoveAttribute
		public RuleCall getAllRefactoringsMoveAttributeParserRuleCall_3_0() { return cAllRefactoringsMoveAttributeParserRuleCall_3_0; }

		//allRefactorings+=MoveMethod*
		public Assignment getAllRefactoringsAssignment_4() { return cAllRefactoringsAssignment_4; }

		//MoveMethod
		public RuleCall getAllRefactoringsMoveMethodParserRuleCall_4_0() { return cAllRefactoringsMoveMethodParserRuleCall_4_0; }

		//allRefactorings+=ExtractClass*
		public Assignment getAllRefactoringsAssignment_5() { return cAllRefactoringsAssignment_5; }

		//ExtractClass
		public RuleCall getAllRefactoringsExtractClassParserRuleCall_5_0() { return cAllRefactoringsExtractClassParserRuleCall_5_0; }

		//allRefactorings+=InlineClass*
		public Assignment getAllRefactoringsAssignment_6() { return cAllRefactoringsAssignment_6; }

		//InlineClass
		public RuleCall getAllRefactoringsInlineClassParserRuleCall_6_0() { return cAllRefactoringsInlineClassParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MoveAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MoveAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_MoveAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cTargetClassKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetClassAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetClassClassCrossReference_8_0 = (CrossReference)cTargetClassAssignment_8.eContents().get(0);
		private final RuleCall cTargetClassClassIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetClassClassCrossReference_8_0.eContents().get(1);
		private final Keyword cAttributeToBeMovedKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAttributeToBeMovedAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cAttributeToBeMovedAttributeCrossReference_11_0 = (CrossReference)cAttributeToBeMovedAssignment_11.eContents().get(0);
		private final RuleCall cAttributeToBeMovedAttributeIDTerminalRuleCall_11_0_1 = (RuleCall)cAttributeToBeMovedAttributeCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//MoveAttribute:
		//	"Refactoring_MoveAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "targetClass" ":" targetClass=[Class]
		//	"attributeToBeMoved" ":" attributeToBeMoved=[Attribute] "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_MoveAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "targetClass" ":" targetClass=[Class]
		//"attributeToBeMoved" ":" attributeToBeMoved=[Attribute] "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_MoveAttribute"
		public Keyword getRefactoring_MoveAttributeKeyword_0() { return cRefactoring_MoveAttributeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"targetClass"
		public Keyword getTargetClassKeyword_6() { return cTargetClassKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//targetClass=[Class]
		public Assignment getTargetClassAssignment_8() { return cTargetClassAssignment_8; }

		//[Class]
		public CrossReference getTargetClassClassCrossReference_8_0() { return cTargetClassClassCrossReference_8_0; }

		//ID
		public RuleCall getTargetClassClassIDTerminalRuleCall_8_0_1() { return cTargetClassClassIDTerminalRuleCall_8_0_1; }

		//"attributeToBeMoved"
		public Keyword getAttributeToBeMovedKeyword_9() { return cAttributeToBeMovedKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//attributeToBeMoved=[Attribute]
		public Assignment getAttributeToBeMovedAssignment_11() { return cAttributeToBeMovedAssignment_11; }

		//[Attribute]
		public CrossReference getAttributeToBeMovedAttributeCrossReference_11_0() { return cAttributeToBeMovedAttributeCrossReference_11_0; }

		//ID
		public RuleCall getAttributeToBeMovedAttributeIDTerminalRuleCall_11_0_1() { return cAttributeToBeMovedAttributeIDTerminalRuleCall_11_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class MoveMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MoveMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_MoveMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cTargetClassKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetClassAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetClassClassCrossReference_8_0 = (CrossReference)cTargetClassAssignment_8.eContents().get(0);
		private final RuleCall cTargetClassClassIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetClassClassCrossReference_8_0.eContents().get(1);
		private final Keyword cMethodToBeMovedKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cMethodToBeMovedAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cMethodToBeMovedMethodCrossReference_11_0 = (CrossReference)cMethodToBeMovedAssignment_11.eContents().get(0);
		private final RuleCall cMethodToBeMovedMethodIDTerminalRuleCall_11_0_1 = (RuleCall)cMethodToBeMovedMethodCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//MoveMethod:
		//	"Refactoring_MoveMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "targetClass" ":" targetClass=[Class]
		//	"methodToBeMoved" ":" methodToBeMoved=[Method] "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_MoveMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "targetClass" ":" targetClass=[Class]
		//"methodToBeMoved" ":" methodToBeMoved=[Method] "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_MoveMethod"
		public Keyword getRefactoring_MoveMethodKeyword_0() { return cRefactoring_MoveMethodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"targetClass"
		public Keyword getTargetClassKeyword_6() { return cTargetClassKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//targetClass=[Class]
		public Assignment getTargetClassAssignment_8() { return cTargetClassAssignment_8; }

		//[Class]
		public CrossReference getTargetClassClassCrossReference_8_0() { return cTargetClassClassCrossReference_8_0; }

		//ID
		public RuleCall getTargetClassClassIDTerminalRuleCall_8_0_1() { return cTargetClassClassIDTerminalRuleCall_8_0_1; }

		//"methodToBeMoved"
		public Keyword getMethodToBeMovedKeyword_9() { return cMethodToBeMovedKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//methodToBeMoved=[Method]
		public Assignment getMethodToBeMovedAssignment_11() { return cMethodToBeMovedAssignment_11; }

		//[Method]
		public CrossReference getMethodToBeMovedMethodCrossReference_11_0() { return cMethodToBeMovedMethodCrossReference_11_0; }

		//ID
		public RuleCall getMethodToBeMovedMethodIDTerminalRuleCall_11_0_1() { return cMethodToBeMovedMethodIDTerminalRuleCall_11_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ExtractClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtractClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_ExtractClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cAttributeSToBeMovedKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAttributesToBeMovedAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cAttributesToBeMovedAttributeCrossReference_9_0 = (CrossReference)cAttributesToBeMovedAssignment_9.eContents().get(0);
		private final RuleCall cAttributesToBeMovedAttributeIDTerminalRuleCall_9_0_1 = (RuleCall)cAttributesToBeMovedAttributeCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAttributesToBeMovedAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cAttributesToBeMovedAttributeCrossReference_10_1_0 = (CrossReference)cAttributesToBeMovedAssignment_10_1.eContents().get(0);
		private final RuleCall cAttributesToBeMovedAttributeIDTerminalRuleCall_10_1_0_1 = (RuleCall)cAttributesToBeMovedAttributeCrossReference_10_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cNameToTheNewClassKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cColonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cNewNameAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cNewNameIDTerminalRuleCall_14_0 = (RuleCall)cNewNameAssignment_14.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//ExtractClass:
		//	"Refactoring_ExtractClass" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attribute(s)ToBeMoved" ":" "{"
		//	attributesToBeMoved+=[Attribute] ("," attributesToBeMoved+=[Attribute])* "}" "nameToTheNewClass" ":" newName=ID "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_ExtractClass" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attribute(s)ToBeMoved" ":" "{"
		//attributesToBeMoved+=[Attribute] ("," attributesToBeMoved+=[Attribute])* "}" "nameToTheNewClass" ":" newName=ID "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_ExtractClass"
		public Keyword getRefactoring_ExtractClassKeyword_0() { return cRefactoring_ExtractClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"attribute(s)ToBeMoved"
		public Keyword getAttributeSToBeMovedKeyword_6() { return cAttributeSToBeMovedKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//attributesToBeMoved+=[Attribute]
		public Assignment getAttributesToBeMovedAssignment_9() { return cAttributesToBeMovedAssignment_9; }

		//[Attribute]
		public CrossReference getAttributesToBeMovedAttributeCrossReference_9_0() { return cAttributesToBeMovedAttributeCrossReference_9_0; }

		//ID
		public RuleCall getAttributesToBeMovedAttributeIDTerminalRuleCall_9_0_1() { return cAttributesToBeMovedAttributeIDTerminalRuleCall_9_0_1; }

		//("," attributesToBeMoved+=[Attribute])*
		public Group getGroup_10() { return cGroup_10; }

		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }

		//attributesToBeMoved+=[Attribute]
		public Assignment getAttributesToBeMovedAssignment_10_1() { return cAttributesToBeMovedAssignment_10_1; }

		//[Attribute]
		public CrossReference getAttributesToBeMovedAttributeCrossReference_10_1_0() { return cAttributesToBeMovedAttributeCrossReference_10_1_0; }

		//ID
		public RuleCall getAttributesToBeMovedAttributeIDTerminalRuleCall_10_1_0_1() { return cAttributesToBeMovedAttributeIDTerminalRuleCall_10_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }

		//"nameToTheNewClass"
		public Keyword getNameToTheNewClassKeyword_12() { return cNameToTheNewClassKeyword_12; }

		//":"
		public Keyword getColonKeyword_13() { return cColonKeyword_13; }

		//newName=ID
		public Assignment getNewNameAssignment_14() { return cNewNameAssignment_14; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_14_0() { return cNewNameIDTerminalRuleCall_14_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class InlineClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_InlineClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cClassToGetAllFeaturesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClassToGetAllFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cClassToGetAllFeaturesClassCrossReference_5_0 = (CrossReference)cClassToGetAllFeaturesAssignment_5.eContents().get(0);
		private final RuleCall cClassToGetAllFeaturesClassIDTerminalRuleCall_5_0_1 = (RuleCall)cClassToGetAllFeaturesClassCrossReference_5_0.eContents().get(1);
		private final Keyword cClassToRemoveKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cClassToRemoveAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cClassToRemoveClassCrossReference_8_0 = (CrossReference)cClassToRemoveAssignment_8.eContents().get(0);
		private final RuleCall cClassToRemoveClassIDTerminalRuleCall_8_0_1 = (RuleCall)cClassToRemoveClassCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//InlineClass:
		//	"Refactoring_InlineClass" name=ID "{" "classToGetAllFeatures" ":" classToGetAllFeatures=[Class] "classToRemove" ":"
		//	classToRemove=[Class] "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_InlineClass" name=ID "{" "classToGetAllFeatures" ":" classToGetAllFeatures=[Class] "classToRemove" ":"
		//classToRemove=[Class] "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_InlineClass"
		public Keyword getRefactoring_InlineClassKeyword_0() { return cRefactoring_InlineClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"classToGetAllFeatures"
		public Keyword getClassToGetAllFeaturesKeyword_3() { return cClassToGetAllFeaturesKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//classToGetAllFeatures=[Class]
		public Assignment getClassToGetAllFeaturesAssignment_5() { return cClassToGetAllFeaturesAssignment_5; }

		//[Class]
		public CrossReference getClassToGetAllFeaturesClassCrossReference_5_0() { return cClassToGetAllFeaturesClassCrossReference_5_0; }

		//ID
		public RuleCall getClassToGetAllFeaturesClassIDTerminalRuleCall_5_0_1() { return cClassToGetAllFeaturesClassIDTerminalRuleCall_5_0_1; }

		//"classToRemove"
		public Keyword getClassToRemoveKeyword_6() { return cClassToRemoveKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//classToRemove=[Class]
		public Assignment getClassToRemoveAssignment_8() { return cClassToRemoveAssignment_8; }

		//[Class]
		public CrossReference getClassToRemoveClassCrossReference_8_0() { return cClassToRemoveClassCrossReference_8_0; }

		//ID
		public RuleCall getClassToRemoveClassIDTerminalRuleCall_8_0_1() { return cClassToRemoveClassIDTerminalRuleCall_8_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class OrganizingDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrganizingData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrganizingDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllRefactoringsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllRefactoringsReplaceDataValueWithObjectParserRuleCall_3_0 = (RuleCall)cAllRefactoringsAssignment_3.eContents().get(0);
		private final Assignment cAllRefactoringsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAllRefactoringsEncapsulateFieldParserRuleCall_4_0 = (RuleCall)cAllRefactoringsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OrganizingData:
		//	"OrganizingData" name=ID "{" allRefactorings+=ReplaceDataValueWithObject* allRefactorings+=EncapsulateField* "}";
		public ParserRule getRule() { return rule; }

		//"OrganizingData" name=ID "{" allRefactorings+=ReplaceDataValueWithObject* allRefactorings+=EncapsulateField* "}"
		public Group getGroup() { return cGroup; }

		//"OrganizingData"
		public Keyword getOrganizingDataKeyword_0() { return cOrganizingDataKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//allRefactorings+=ReplaceDataValueWithObject*
		public Assignment getAllRefactoringsAssignment_3() { return cAllRefactoringsAssignment_3; }

		//ReplaceDataValueWithObject
		public RuleCall getAllRefactoringsReplaceDataValueWithObjectParserRuleCall_3_0() { return cAllRefactoringsReplaceDataValueWithObjectParserRuleCall_3_0; }

		//allRefactorings+=EncapsulateField*
		public Assignment getAllRefactoringsAssignment_4() { return cAllRefactoringsAssignment_4; }

		//EncapsulateField
		public RuleCall getAllRefactoringsEncapsulateFieldParserRuleCall_4_0() { return cAllRefactoringsEncapsulateFieldParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ReplaceDataValueWithObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceDataValueWithObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_ReplaceDataValueWithObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cAttributeToReplaceDataWithObjectKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAttributeToReplaceDataWithObjectAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cAttributeToReplaceDataWithObjectAttributeCrossReference_8_0 = (CrossReference)cAttributeToReplaceDataWithObjectAssignment_8.eContents().get(0);
		private final RuleCall cAttributeToReplaceDataWithObjectAttributeIDTerminalRuleCall_8_0_1 = (RuleCall)cAttributeToReplaceDataWithObjectAttributeCrossReference_8_0.eContents().get(1);
		private final Keyword cNewAttributesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cNewAttributesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cNewAttributesAttributeParserRuleCall_12_0 = (RuleCall)cNewAttributesAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//ReplaceDataValueWithObject:
		//	"Refactoring_ReplaceDataValueWithObject" name=ID "{" "sourceClass" ":" sourceClass=[Class]
		//	"attributeToReplaceDataWithObject" ":" attributeToReplaceDataWithObject=[Attribute] "newAttributes" ":" "{"
		//	newAttributes+=Attribute* "}" //		'newAttributes' ':' newAttributes = Attribute
		//	"}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_ReplaceDataValueWithObject" name=ID "{" "sourceClass" ":" sourceClass=[Class]
		//"attributeToReplaceDataWithObject" ":" attributeToReplaceDataWithObject=[Attribute] "newAttributes" ":" "{"
		//newAttributes+=Attribute* "}" //		'newAttributes' ':' newAttributes = Attribute
		//"}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_ReplaceDataValueWithObject"
		public Keyword getRefactoring_ReplaceDataValueWithObjectKeyword_0() { return cRefactoring_ReplaceDataValueWithObjectKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"attributeToReplaceDataWithObject"
		public Keyword getAttributeToReplaceDataWithObjectKeyword_6() { return cAttributeToReplaceDataWithObjectKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//attributeToReplaceDataWithObject=[Attribute]
		public Assignment getAttributeToReplaceDataWithObjectAssignment_8() { return cAttributeToReplaceDataWithObjectAssignment_8; }

		//[Attribute]
		public CrossReference getAttributeToReplaceDataWithObjectAttributeCrossReference_8_0() { return cAttributeToReplaceDataWithObjectAttributeCrossReference_8_0; }

		//ID
		public RuleCall getAttributeToReplaceDataWithObjectAttributeIDTerminalRuleCall_8_0_1() { return cAttributeToReplaceDataWithObjectAttributeIDTerminalRuleCall_8_0_1; }

		//"newAttributes"
		public Keyword getNewAttributesKeyword_9() { return cNewAttributesKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//newAttributes+=Attribute*
		public Assignment getNewAttributesAssignment_12() { return cNewAttributesAssignment_12; }

		//Attribute
		public RuleCall getNewAttributesAttributeParserRuleCall_12_0() { return cNewAttributesAttributeParserRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }

		////		'newAttributes' ':' newAttributes = Attribute
		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class EncapsulateFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EncapsulateField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_EncapsulateFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cAttributeToEncapsulateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAttributeToEncapsulateAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cAttributeToEncapsulateAttributeCrossReference_8_0 = (CrossReference)cAttributeToEncapsulateAssignment_8.eContents().get(0);
		private final RuleCall cAttributeToEncapsulateAttributeIDTerminalRuleCall_8_0_1 = (RuleCall)cAttributeToEncapsulateAttributeCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EncapsulateField:
		//	"Refactoring_EncapsulateField" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToEncapsulate" ":"
		//	attributeToEncapsulate=[Attribute] "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_EncapsulateField" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToEncapsulate" ":"
		//attributeToEncapsulate=[Attribute] "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_EncapsulateField"
		public Keyword getRefactoring_EncapsulateFieldKeyword_0() { return cRefactoring_EncapsulateFieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"attributeToEncapsulate"
		public Keyword getAttributeToEncapsulateKeyword_6() { return cAttributeToEncapsulateKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//attributeToEncapsulate=[Attribute]
		public Assignment getAttributeToEncapsulateAssignment_8() { return cAttributeToEncapsulateAssignment_8; }

		//[Attribute]
		public CrossReference getAttributeToEncapsulateAttributeCrossReference_8_0() { return cAttributeToEncapsulateAttributeCrossReference_8_0; }

		//ID
		public RuleCall getAttributeToEncapsulateAttributeIDTerminalRuleCall_8_0_1() { return cAttributeToEncapsulateAttributeIDTerminalRuleCall_8_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class DealingWithGeneralizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DealingWithGeneralization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDealingWithGeneralizationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllRefactoringsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllRefactoringsPushDownAttributeParserRuleCall_3_0 = (RuleCall)cAllRefactoringsAssignment_3.eContents().get(0);
		private final Assignment cAllRefactoringsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAllRefactoringsPushDownMethodParserRuleCall_4_0 = (RuleCall)cAllRefactoringsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DealingWithGeneralization:
		//	"DealingWithGeneralization" name=ID "{" allRefactorings+=PushDownAttribute* allRefactorings+=PushDownMethod* "}";
		public ParserRule getRule() { return rule; }

		//"DealingWithGeneralization" name=ID "{" allRefactorings+=PushDownAttribute* allRefactorings+=PushDownMethod* "}"
		public Group getGroup() { return cGroup; }

		//"DealingWithGeneralization"
		public Keyword getDealingWithGeneralizationKeyword_0() { return cDealingWithGeneralizationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//allRefactorings+=PushDownAttribute*
		public Assignment getAllRefactoringsAssignment_3() { return cAllRefactoringsAssignment_3; }

		//PushDownAttribute
		public RuleCall getAllRefactoringsPushDownAttributeParserRuleCall_3_0() { return cAllRefactoringsPushDownAttributeParserRuleCall_3_0; }

		//allRefactorings+=PushDownMethod*
		public Assignment getAllRefactoringsAssignment_4() { return cAllRefactoringsAssignment_4; }

		//PushDownMethod
		public RuleCall getAllRefactoringsPushDownMethodParserRuleCall_4_0() { return cAllRefactoringsPushDownMethodParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PushDownAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PushDownAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_PushDownAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cAttributeToPushDownKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAttributeToBePushedAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cAttributeToBePushedAttributeCrossReference_8_0 = (CrossReference)cAttributeToBePushedAssignment_8.eContents().get(0);
		private final RuleCall cAttributeToBePushedAttributeIDTerminalRuleCall_8_0_1 = (RuleCall)cAttributeToBePushedAttributeCrossReference_8_0.eContents().get(1);
		private final Keyword cTargetClassKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTargetClassAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cTargetClassClassCrossReference_11_0 = (CrossReference)cTargetClassAssignment_11.eContents().get(0);
		private final RuleCall cTargetClassClassIDTerminalRuleCall_11_0_1 = (RuleCall)cTargetClassClassCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//PushDownAttribute:
		//	"Refactoring_PushDownAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToPushDown" ":"
		//	attributeToBePushed=[Attribute] "targetClass" ":" targetClass=[Class] "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_PushDownAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToPushDown" ":"
		//attributeToBePushed=[Attribute] "targetClass" ":" targetClass=[Class] "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_PushDownAttribute"
		public Keyword getRefactoring_PushDownAttributeKeyword_0() { return cRefactoring_PushDownAttributeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"attributeToPushDown"
		public Keyword getAttributeToPushDownKeyword_6() { return cAttributeToPushDownKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//attributeToBePushed=[Attribute]
		public Assignment getAttributeToBePushedAssignment_8() { return cAttributeToBePushedAssignment_8; }

		//[Attribute]
		public CrossReference getAttributeToBePushedAttributeCrossReference_8_0() { return cAttributeToBePushedAttributeCrossReference_8_0; }

		//ID
		public RuleCall getAttributeToBePushedAttributeIDTerminalRuleCall_8_0_1() { return cAttributeToBePushedAttributeIDTerminalRuleCall_8_0_1; }

		//"targetClass"
		public Keyword getTargetClassKeyword_9() { return cTargetClassKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//targetClass=[Class]
		public Assignment getTargetClassAssignment_11() { return cTargetClassAssignment_11; }

		//[Class]
		public CrossReference getTargetClassClassCrossReference_11_0() { return cTargetClassClassCrossReference_11_0; }

		//ID
		public RuleCall getTargetClassClassIDTerminalRuleCall_11_0_1() { return cTargetClassClassIDTerminalRuleCall_11_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class PushDownMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PushDownMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefactoring_PushDownMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceClassKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceClassClassCrossReference_5_0 = (CrossReference)cSourceClassAssignment_5.eContents().get(0);
		private final RuleCall cSourceClassClassIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cMethodToPushDownKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMethodToBePushedAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cMethodToBePushedMethodCrossReference_8_0 = (CrossReference)cMethodToBePushedAssignment_8.eContents().get(0);
		private final RuleCall cMethodToBePushedMethodIDTerminalRuleCall_8_0_1 = (RuleCall)cMethodToBePushedMethodCrossReference_8_0.eContents().get(1);
		private final Keyword cTargetClassKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTargetClassAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cTargetClassClassCrossReference_11_0 = (CrossReference)cTargetClassAssignment_11.eContents().get(0);
		private final RuleCall cTargetClassClassIDTerminalRuleCall_11_0_1 = (RuleCall)cTargetClassClassCrossReference_11_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//PushDownMethod:
		//	"Refactoring_PushDownMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "methodToPushDown" ":"
		//	methodToBePushed=[Method] "targetClass" ":" targetClass=[Class] "}";
		public ParserRule getRule() { return rule; }

		//"Refactoring_PushDownMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "methodToPushDown" ":"
		//methodToBePushed=[Method] "targetClass" ":" targetClass=[Class] "}"
		public Group getGroup() { return cGroup; }

		//"Refactoring_PushDownMethod"
		public Keyword getRefactoring_PushDownMethodKeyword_0() { return cRefactoring_PushDownMethodKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"sourceClass"
		public Keyword getSourceClassKeyword_3() { return cSourceClassKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//sourceClass=[Class]
		public Assignment getSourceClassAssignment_5() { return cSourceClassAssignment_5; }

		//[Class]
		public CrossReference getSourceClassClassCrossReference_5_0() { return cSourceClassClassCrossReference_5_0; }

		//ID
		public RuleCall getSourceClassClassIDTerminalRuleCall_5_0_1() { return cSourceClassClassIDTerminalRuleCall_5_0_1; }

		//"methodToPushDown"
		public Keyword getMethodToPushDownKeyword_6() { return cMethodToPushDownKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//methodToBePushed=[Method]
		public Assignment getMethodToBePushedAssignment_8() { return cMethodToBePushedAssignment_8; }

		//[Method]
		public CrossReference getMethodToBePushedMethodCrossReference_8_0() { return cMethodToBePushedMethodCrossReference_8_0; }

		//ID
		public RuleCall getMethodToBePushedMethodIDTerminalRuleCall_8_0_1() { return cMethodToBePushedMethodIDTerminalRuleCall_8_0_1; }

		//"targetClass"
		public Keyword getTargetClassKeyword_9() { return cTargetClassKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//targetClass=[Class]
		public Assignment getTargetClassAssignment_11() { return cTargetClassAssignment_11; }

		//[Class]
		public CrossReference getTargetClassClassCrossReference_11_0() { return cTargetClassClassCrossReference_11_0; }

		//ID
		public RuleCall getTargetClassClassIDTerminalRuleCall_11_0_1() { return cTargetClassClassIDTerminalRuleCall_11_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	
	
	private ModelElements pModel;
	private ImportElements pImport;
	private TypeElements pType;
	private ClassElements pClass;
	private AttributeElements pAttribute;
	private ElementTypeElements pElementType;
	private BasicTypeElements pBasicType;
	private ClassTypeElements pClassType;
	private MethodElements pMethod;
	private RefactoringElements pRefactoring;
	private RenameFeatureElements pRenameFeature;
	private RenameClassElements pRenameClass;
	private RenameAttributeElements pRenameAttribute;
	private RenameMethodElements pRenameMethod;
	private MovingFeaturesBetweenObjectsElements pMovingFeaturesBetweenObjects;
	private MoveAttributeElements pMoveAttribute;
	private MoveMethodElements pMoveMethod;
	private ExtractClassElements pExtractClass;
	private InlineClassElements pInlineClass;
	private OrganizingDataElements pOrganizingData;
	private ReplaceDataValueWithObjectElements pReplaceDataValueWithObject;
	private EncapsulateFieldElements pEncapsulateField;
	private DealingWithGeneralizationElements pDealingWithGeneralization;
	private PushDownAttributeElements pPushDownAttribute;
	private PushDownMethodElements pPushDownMethod;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"model" name=ID imports+=Import* contains+=Type*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"importing" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Type:
	//	Class | Refactoring;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Class:
	//	"Class" name=ID "{" attributes+=Attribute* methods+=Method* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Attribute:
	//	"@" elementType=ElementType name=ID;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//ElementType:
	//	BasicType | ClassType;
	public ElementTypeElements getElementTypeAccess() {
		return (pElementType != null) ? pElementType : (pElementType = new ElementTypeElements());
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}

	//BasicType:
	//	typeName=("string" | "int" | "boolean" | "float" | "char" | "byte" | "short" | "long" | "double");
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//ClassType:
	//	classType=[Class];
	public ClassTypeElements getClassTypeAccess() {
		return (pClassType != null) ? pClassType : (pClassType = new ClassTypeElements());
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}

	//Method:
	//	"def" name=ID;
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Refactoring:
	//	RenameFeature | MovingFeaturesBetweenObjects | OrganizingData | DealingWithGeneralization;
	public RefactoringElements getRefactoringAccess() {
		return (pRefactoring != null) ? pRefactoring : (pRefactoring = new RefactoringElements());
	}
	
	public ParserRule getRefactoringRule() {
		return getRefactoringAccess().getRule();
	}

	//RenameFeature:
	//	"Rename_Feature" name=ID "{" allRefactorings+=RenameClass* allRefactorings+=RenameAttribute*
	//	allRefactorings+=RenameMethod* "}";
	public RenameFeatureElements getRenameFeatureAccess() {
		return (pRenameFeature != null) ? pRenameFeature : (pRenameFeature = new RenameFeatureElements());
	}
	
	public ParserRule getRenameFeatureRule() {
		return getRenameFeatureAccess().getRule();
	}

	//RenameClass:
	//	"Refactoring_RenameClass" name=ID "{" "classToBeRename" ":" classToBeRename=[Class] "newName" ":" newName=ID "}";
	public RenameClassElements getRenameClassAccess() {
		return (pRenameClass != null) ? pRenameClass : (pRenameClass = new RenameClassElements());
	}
	
	public ParserRule getRenameClassRule() {
		return getRenameClassAccess().getRule();
	}

	//RenameAttribute:
	//	"Refactiong_RenameAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToBeRename" ":"
	//	attributeToBeRename=[Attribute] "newName" ":" newName=ID "}";
	public RenameAttributeElements getRenameAttributeAccess() {
		return (pRenameAttribute != null) ? pRenameAttribute : (pRenameAttribute = new RenameAttributeElements());
	}
	
	public ParserRule getRenameAttributeRule() {
		return getRenameAttributeAccess().getRule();
	}

	//RenameMethod:
	//	"Refactoring_RenameMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "methodToBeRename" ":"
	//	methodToBeRename=[Method] "newName" ":" newName=ID "}";
	public RenameMethodElements getRenameMethodAccess() {
		return (pRenameMethod != null) ? pRenameMethod : (pRenameMethod = new RenameMethodElements());
	}
	
	public ParserRule getRenameMethodRule() {
		return getRenameMethodAccess().getRule();
	}

	//MovingFeaturesBetweenObjects:
	//	"MovingFeaturesBetweenObjects" name=ID "{" allRefactorings+=MoveAttribute* allRefactorings+=MoveMethod*
	//	allRefactorings+=ExtractClass* allRefactorings+=InlineClass* "}";
	public MovingFeaturesBetweenObjectsElements getMovingFeaturesBetweenObjectsAccess() {
		return (pMovingFeaturesBetweenObjects != null) ? pMovingFeaturesBetweenObjects : (pMovingFeaturesBetweenObjects = new MovingFeaturesBetweenObjectsElements());
	}
	
	public ParserRule getMovingFeaturesBetweenObjectsRule() {
		return getMovingFeaturesBetweenObjectsAccess().getRule();
	}

	//MoveAttribute:
	//	"Refactoring_MoveAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "targetClass" ":" targetClass=[Class]
	//	"attributeToBeMoved" ":" attributeToBeMoved=[Attribute] "}";
	public MoveAttributeElements getMoveAttributeAccess() {
		return (pMoveAttribute != null) ? pMoveAttribute : (pMoveAttribute = new MoveAttributeElements());
	}
	
	public ParserRule getMoveAttributeRule() {
		return getMoveAttributeAccess().getRule();
	}

	//MoveMethod:
	//	"Refactoring_MoveMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "targetClass" ":" targetClass=[Class]
	//	"methodToBeMoved" ":" methodToBeMoved=[Method] "}";
	public MoveMethodElements getMoveMethodAccess() {
		return (pMoveMethod != null) ? pMoveMethod : (pMoveMethod = new MoveMethodElements());
	}
	
	public ParserRule getMoveMethodRule() {
		return getMoveMethodAccess().getRule();
	}

	//ExtractClass:
	//	"Refactoring_ExtractClass" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attribute(s)ToBeMoved" ":" "{"
	//	attributesToBeMoved+=[Attribute] ("," attributesToBeMoved+=[Attribute])* "}" "nameToTheNewClass" ":" newName=ID "}";
	public ExtractClassElements getExtractClassAccess() {
		return (pExtractClass != null) ? pExtractClass : (pExtractClass = new ExtractClassElements());
	}
	
	public ParserRule getExtractClassRule() {
		return getExtractClassAccess().getRule();
	}

	//InlineClass:
	//	"Refactoring_InlineClass" name=ID "{" "classToGetAllFeatures" ":" classToGetAllFeatures=[Class] "classToRemove" ":"
	//	classToRemove=[Class] "}";
	public InlineClassElements getInlineClassAccess() {
		return (pInlineClass != null) ? pInlineClass : (pInlineClass = new InlineClassElements());
	}
	
	public ParserRule getInlineClassRule() {
		return getInlineClassAccess().getRule();
	}

	//OrganizingData:
	//	"OrganizingData" name=ID "{" allRefactorings+=ReplaceDataValueWithObject* allRefactorings+=EncapsulateField* "}";
	public OrganizingDataElements getOrganizingDataAccess() {
		return (pOrganizingData != null) ? pOrganizingData : (pOrganizingData = new OrganizingDataElements());
	}
	
	public ParserRule getOrganizingDataRule() {
		return getOrganizingDataAccess().getRule();
	}

	//ReplaceDataValueWithObject:
	//	"Refactoring_ReplaceDataValueWithObject" name=ID "{" "sourceClass" ":" sourceClass=[Class]
	//	"attributeToReplaceDataWithObject" ":" attributeToReplaceDataWithObject=[Attribute] "newAttributes" ":" "{"
	//	newAttributes+=Attribute* "}" //		'newAttributes' ':' newAttributes = Attribute
	//	"}";
	public ReplaceDataValueWithObjectElements getReplaceDataValueWithObjectAccess() {
		return (pReplaceDataValueWithObject != null) ? pReplaceDataValueWithObject : (pReplaceDataValueWithObject = new ReplaceDataValueWithObjectElements());
	}
	
	public ParserRule getReplaceDataValueWithObjectRule() {
		return getReplaceDataValueWithObjectAccess().getRule();
	}

	//EncapsulateField:
	//	"Refactoring_EncapsulateField" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToEncapsulate" ":"
	//	attributeToEncapsulate=[Attribute] "}";
	public EncapsulateFieldElements getEncapsulateFieldAccess() {
		return (pEncapsulateField != null) ? pEncapsulateField : (pEncapsulateField = new EncapsulateFieldElements());
	}
	
	public ParserRule getEncapsulateFieldRule() {
		return getEncapsulateFieldAccess().getRule();
	}

	//DealingWithGeneralization:
	//	"DealingWithGeneralization" name=ID "{" allRefactorings+=PushDownAttribute* allRefactorings+=PushDownMethod* "}";
	public DealingWithGeneralizationElements getDealingWithGeneralizationAccess() {
		return (pDealingWithGeneralization != null) ? pDealingWithGeneralization : (pDealingWithGeneralization = new DealingWithGeneralizationElements());
	}
	
	public ParserRule getDealingWithGeneralizationRule() {
		return getDealingWithGeneralizationAccess().getRule();
	}

	//PushDownAttribute:
	//	"Refactoring_PushDownAttribute" name=ID "{" "sourceClass" ":" sourceClass=[Class] "attributeToPushDown" ":"
	//	attributeToBePushed=[Attribute] "targetClass" ":" targetClass=[Class] "}";
	public PushDownAttributeElements getPushDownAttributeAccess() {
		return (pPushDownAttribute != null) ? pPushDownAttribute : (pPushDownAttribute = new PushDownAttributeElements());
	}
	
	public ParserRule getPushDownAttributeRule() {
		return getPushDownAttributeAccess().getRule();
	}

	//PushDownMethod:
	//	"Refactoring_PushDownMethod" name=ID "{" "sourceClass" ":" sourceClass=[Class] "methodToPushDown" ":"
	//	methodToBePushed=[Method] "targetClass" ":" targetClass=[Class] "}";
	public PushDownMethodElements getPushDownMethodAccess() {
		return (pPushDownMethod != null) ? pPushDownMethod : (pPushDownMethod = new PushDownMethodElements());
	}
	
	public ParserRule getPushDownMethodRule() {
		return getPushDownMethodAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
